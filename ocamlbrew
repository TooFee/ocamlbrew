#!/bin/bash

# Fail if we try to use an undefined value
set -u
# Quit on errors
set -e

# Set configuration options such as installation and build locations here

# The version of OCaml we are installing and download URL
: ${OCAML_MAJOR_VERSION=3}
: ${OCAML_MINOR_VERSION=12}
: ${OCAML_PATCH_VERSION=1}
: ${OCAML_VERSION=$OCAML_MAJOR_VERSION.$OCAML_MINOR_VERSION.$OCAML_PATCH_VERSION}
: ${OCAML_URL=http://caml.inria.fr/pub/distrib/ocaml-$OCAML_MAJOR_VERSION.$OCAML_MINOR_VERSION/ocaml-$OCAML_VERSION.tar.gz}

# findlib version we are installing and download URL
: ${FINDLIB_MAJOR_VERSION=1}
: ${FINDLIB_MINOR_VERSION=2}
: ${FINDLIB_PATCH_VERSION=7}
: ${FINDLIB_VERSION=$FINDLIB_MAJOR_VERSION.$FINDLIB_MINOR_VERSION.$FINDLIB_PATCH_VERSION}
: ${FINDLIB_URL=http://download.camlcity.org/download/findlib-$FINDLIB_VERSION.tar.gz}

# Installation prefix for the software being installed
: ${OCAMLBREW_BASE=$HOME/ocamlbrew}
OCAML_BASE="$OCAMLBREW_BASE"/ocaml-$OCAML_VERSION
# Parent directory where software will be installed
: ${BUILD_DIR="$OCAML_BASE"/build}

# odb paths
: ${ODB_BUILD_DIR="$BUILD_DIR"/odb}
: ${ODB_INSTALL_DIR="$OCAML_BASE"/odb}

# Output will be redirected to this file
: ${OCAMLBREW_LOGFILE=`tempfile -d /tmp -p ocamlbrew -s .log`}

# Main entry point
echo Welcome to ocamlbrew!
echo
echo Working with $OCAML_URL | tee -a "$OCAMLBREW_LOGFILE"
echo Software will be built and installed under "$OCAML_BASE" | tee -a "$OCAMLBREW_LOGFILE"
echo Output will be written to "$OCAMLBREW_LOGFILE"
echo

# Ask the user what components they would like to install
read -p "Would you like to install findlib? (y/n) "
if [ "${REPLY,,}" != "y" ]; then
    FINDLIB_INSTALL="false"
    ODB_INSTALL="false"
    OASIS_INSTALL="false"
    UTOP_INSTALL="false"
    BATTERIES_INSTALL="false"
else
    FINDLIB_INSTALL="true"
    ODB_INSTALL="true"
    read -p "Would you like to install oasis? (y/n) "
    if [ "${REPLY,,}" = "y" ]; then
        OASIS_INSTALL="true"
    else
        OASIS_INSTALL="false"
    fi

    read -p "Would you like to install utop? (y/n) "
    if [ "${REPLY,,}" = "y" ]; then
        UTOP_INSTALL="true"
    else
        UTOP_INSTALL="false"
    fi

    read -p "Would you like to install Batteries? (y/n) "
    if [ "${REPLY,,}" = "y" ]; then
        BATTERIES_INSTALL="true"
    else
        BATTERIES_INSTALL="false"
    fi
fi

# Print a summary of what we are going to do, then continue
echo This script is about to:
echo Install OCaml
if "$FINDLIB_INSTALL" = "true"; then echo and install findlib; fi
if "$ODB_INSTALL" = "true"; then echo and install odb; fi
if "$OASIS_INSTALL" = "true"; then echo and install oasis; fi
if "$UTOP_INSTALL" = "true"; then echo and install utop; fi
if "$BATTERIES_INSTALL" = "true"; then echo and install Batteries; fi
echo

read -p "Continue (y/n)? "
if [ "${REPLY,,}" != "y" ]; then
    echo Exiting...
    rm -f "$OCAMLBREW_LOGFILE"
    exit 1
fi

{
# Create and move to the build directory
mkdir -p "$BUILD_DIR"
pushd "$BUILD_DIR"
} >> "$OCAMLBREW_LOGFILE" 2>&1

# OCaml

echo Retrieving OCaml | tee -a "$OCAMLBREW_LOGFILE"
curl -O "$OCAML_URL" >> "$OCAMLBREW_LOGFILE" 2>&1

echo Extracting and building OCaml | tee -a "$OCAMLBREW_LOGFILE"
{
tar xzf ocaml-$OCAML_VERSION.tar.gz
cd ocaml-$OCAML_VERSION
./configure -prefix "$OCAML_BASE"
make world.opt
} >> "$OCAMLBREW_LOGFILE" 2>&1

echo Installing OCaml | tee -a "$OCAMLBREW_LOGFILE"
{
make install
# Install the compiler libraries as well.  They are needed for utop and some
# other projects.
mkdir -p "$OCAML_BASE"/lib/ocaml/compiler-libs/typing
mkdir -p "$OCAML_BASE"/lib/ocaml/compiler-libs/parsing
mkdir -p "$OCAML_BASE"/lib/ocaml/compiler-libs/utils
cp typing/*.cmi "$OCAML_BASE"/lib/ocaml/compiler-libs/typing/
cp parsing/*.cmi "$OCAML_BASE"/lib/ocaml/compiler-libs/parsing/
cp utils/*.cmi "$OCAML_BASE"/lib/ocaml/compiler-libs/utils/
} >> "$OCAMLBREW_LOGFILE" 2>&1

# Setup the path so that OCaml is visible
PATH="$OCAML_BASE"/bin:$PATH

# findlib
if [ "$FINDLIB_INSTALL" = "true" ]; then
    echo Retrieving findlib | tee -a "$OCAMLBREW_LOGFILE"
    curl -O "$FINDLIB_URL" >> "$OCAMLBREW_LOGFILE" 2>&1

    echo Extracting and building findlib | tee -a "$OCAMLBREW_LOGFILE"
    {
    tar xzf findlib-$FINDLIB_VERSION.tar.gz
    cd findlib-$FINDLIB_VERSION
    ./configure
    make all opt
    } >> "$OCAMLBREW_LOGFILE" 2>&1

    echo Installing and configuring findlib | tee -a "$OCAMLBREW_LOGFILE"
    {
    make install
    # Extra configuration for OCaml libraries with C stubs, as recommended by the
    # findlib documentation.
    mkdir `ocamlfind printconf destdir`/stublibs
    echo `ocamlfind printconf destdir`/stublibs >> `ocamlfind printconf ldconf`
    } >> "$OCAMLBREW_LOGFILE" 2>&1
fi

# odb
if [ "$ODB_INSTALL" = "true" ]; then
    echo Retrieving the latest version of odb.ml | tee -a "$OCAMLBREW_LOGFILE"
    {
    cd "$OCAML_BASE"/bin
    curl -O https://raw.github.com/thelema/odb/master/odb.ml
    chmod +x odb.ml
    cd "$OCAML_BASE"/etc
    curl -O https://raw.github.com/thelema/odb/master/odb.bashrc
    set +u
    export ODB_BUILD_DIR="$ODB_BUILD_DIR"
    export ODB_INSTALL_DIR="$ODB_INSTALL_DIR"
    source odb.bashrc
    set -u
    mkdir -p "$ODB_BUILD_DIR"
    mkdir -p "$ODB_INSTALL_DIR"
    } >> "$OCAMLBREW_LOGFILE" 2>&1

    # Create a sourceable environment
    {
    echo export ODB_BUILD_DIR=$ODB_BUILD_DIR
    echo export ODB_INSTALL_DIR=$ODB_INSTALL_DIR
    echo export PATH=$OCAML_BASE/bin:\$PATH
    echo source $OCAML_BASE/etc/odb.bashrc
    } > $OCAML_BASE/etc/ocamlbrew.bashrc
else
    # Create a sourceable environment
    {
        echo export PATH=$OCAML_BASE/bin:\$PATH
    } > $OCAML_BASE/etc/ocamlbrew.bashrc
fi

# oasis
if [ "$OASIS_INSTALL" = "true" ]; then
    echo Installing oasis using odb.ml | tee -a "$OCAMLBREW_LOGFILE"
    {
    odb.ml oUnit fileutils
    odb.ml oasis
    } >> "$OCAMLBREW_LOGFILE" 2>&1
fi

# utop
if [ "$UTOP_INSTALL" = "true" ]; then
    echo Installing utop using odb.ml | tee -a "$OCAMLBREW_LOGFILE"
    {
    # React is an optional dependency of Lwt
    odb.ml react
    # Make sure Lwt is built with React support
    odb.ml --configure-flags --enable-react lwt
    odb.ml utop
    } >> "$OCAMLBREW_LOGFILE" 2>&1
fi

# Batteries
if [ "$BATTERIES_INSTALL" = "true" ]; then
    echo Installing Batteries using odb.ml | tee -a "$OCAMLBREW_LOGFILE"
    odb.ml batteries >> "$OCAMLBREW_LOGFILE" 2>&1
fi

# All done!

echo Done! | tee -a "$OCAMLBREW_LOGFILE"
popd >> "$OCAMLBREW_LOGFILE" 2>&1
echo
echo "You may want to add the following line to your ~/.bashrc so that OCaml is
readily available to use:

source $OCAML_BASE/etc/ocamlbrew.bashrc

Enjoy!"

